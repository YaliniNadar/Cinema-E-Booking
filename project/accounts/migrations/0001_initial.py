# Generated by Django 4.1 on 2022-10-19 01:05

import creditcards.models
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import encrypted_model_fields.fields
import localflavor.us.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [("auth", "0012_alter_user_first_name_max_length")]

    operations = [
        migrations.CreateModel(
            name="Address",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "address1",
                    models.CharField(
                        default="", max_length=1024, verbose_name="Address line 1"
                    ),
                ),
                (
                    "address2",
                    models.CharField(
                        blank=True,
                        max_length=1024,
                        null=True,
                        verbose_name="Address line 2",
                    ),
                ),
                (
                    "city",
                    models.CharField(default="", max_length=1024, verbose_name="City"),
                ),
                (
                    "state",
                    localflavor.us.models.USStateField(
                        default="", max_length=2, verbose_name="State"
                    ),
                ),
                (
                    "zip_code",
                    models.CharField(
                        default="", max_length=12, verbose_name="Postal Code"
                    ),
                ),
            ],
            options={"verbose_name_plural": "Address"},
        ),
        migrations.CreateModel(
            name="CustomerSatus",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("status", models.CharField(max_length=100, unique=True)),
            ],
            options={"verbose_name_plural": "Customer Status"},
        ),
        migrations.CreateModel(
            name="PaymentCard",
            fields=[
                (
                    "card_id",
                    models.IntegerField(
                        default=None, primary_key=True, serialize=False, unique=True
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        default="", max_length=120, verbose_name="Name on Card"
                    ),
                ),
                (
                    "cc_number",
                    encrypted_model_fields.fields.EncryptedCharField(
                        verbose_name="Card Number"
                    ),
                ),
                (
                    "cc_expiry",
                    creditcards.models.CardExpiryField(verbose_name="Expiration Date"),
                ),
                (
                    "cc_code",
                    creditcards.models.SecurityCodeField(
                        max_length=4, verbose_name="Security Code"
                    ),
                ),
                (
                    "billing_address",
                    models.ForeignKey(
                        default=None,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="accounts.address",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="CustomUser",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, verbose_name="email address"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "receive_promos",
                    models.BooleanField(blank=True, default=False, null=True),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
                "swappable": "AUTH_USER_MODEL",
            },
            managers=[("objects", django.contrib.auth.models.UserManager())],
        ),
    ]
